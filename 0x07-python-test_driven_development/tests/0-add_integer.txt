Test cases for 0-addd_integer module
------------------------------------
------------------------------------

Description: This module takes 2 integers or floating numbers and finds their sum.

USAGE:
------
------

import function from the module:
    >>> add_integer = __import__("0-add_integer").add_integer

Case valid values:

  add two positive integers (a = 1, b = 2):
      >>> add_integer(1, 2)
      3

  add two negative integers (a = -5, b = -3):
      >>> add_integer(-5, -3)
      -8

  add a posive and a negative integer (a = 10, b = -2):
      >>> add_integer(26, -2)
      24

  add an integer with the default value(a = 2, b = 98):
      >>> add_integer(2)
      100

  add an integer with a floating number (a = 7, b = 10.8):
      >>> add_integer(7, 10.8)
      17

  add two floating numbers (a = 1.2, b = 8.8):
      >>> add_integer(1.2, 8.8)
      9

Case invalid values:

  add an integer with a string (a = 1, b = "xyz"):
      >>> add_integer(1, "xyz")
      Traceback (most recent call last):
                ...
      TypeError: b must be an integer

  add an integer with a list (a = [1, 2, 3], b = 10):
      >>> add_integer([1, 2, 3], 10)
      Traceback (most recent call last):
                ...
      TypeError: a must be an integer

Case NaN:

  add NaN with the default value (a = float('nan')):
      >>> add_integer(float('nan'))
      Traceback (most recent call last):
          ...
      ValueError: cannot convert float NaN to integer

  add NaN with an integer (a = 8, b = float("nan")):
      >>> add_integer(8, float("nan"))
      Traceback (most recent call last):
          ...
      ValueError: cannot convert float NaN to integer

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer