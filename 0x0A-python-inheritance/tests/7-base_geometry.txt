-------------------------------------
-------------------------------------
How to Use ``7-base_geometry`` module
-------------------------------------
-------------------------------------

This is a simple module that has a single class ``BaseGeometry``. This base class
defines common methods to be inherited by its subclasses.

Import module
-------------
-------------

Import the class to be tested from module

::

    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Object
------
------

case: create object

::

    >>> my_obj = BaseGeometry()

Object method
-------------
-------------

Tests for BaseGeometry public instance method area and integer_validator.

area
----

``area()`` is not implemented but raises an exception when accessed.

case: test area method

::

    >>> my_obj.area()
    Traceback (most recent call last):
      ...
    Exception: area() is not implemented


integer_validator
-----------------

``integer_validator()`` validates the values of the attribute.

case: test no arguments passed

::

    >>> my_obj.integer_validator()
    Traceback (most recent call last):
      ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

case: 1 argument passed

    >>> my_obj.integer_validator("age")
    Traceback (most recent call last):
      ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

case: 2 arguments (name and value) passed.

::

    >>> my_obj.integer_validator('age', 21)

case: value not integer

::

    >>> my_obj.integer_validator('age', [1, 2])
    Traceback (most recent call last):
      ...
    TypeError: age must be an integer

    >>> my_obj.integer_validator("age", "4")
    Traceback (most recent call last):
      ...
    TypeError: age must be an integer

    >>> my_obj.integer_validator("age", (2,))
    Traceback (most recent call last):
      ...
    TypeError: age must be an integer

    >>> my_obj.integer_validator("age", True)
    Traceback (most recent call last):
      ...
    TypeError: age must be an integer

    >>> my_obj.integer_validator("age", {3, 4})
    Traceback (most recent call last):
      ...
    TypeError: age must be an integer

    >>> my_obj.integer_validator("age", None)
    Traceback (most recent call last):
      ...
    TypeError: age must be an integer

case: value <= 0

::

    >>> my_obj.integer_validator('age', -1)
    Traceback (most recent call last):
      ...
    ValueError: age must be greater than 0

    >>> my_obj.integer_validator('age', 0)
    Traceback (most recent call last):
      ...
    ValueError: age must be greater than 0
